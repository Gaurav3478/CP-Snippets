#include <bits/stdc++.h>
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace std;
using namespace __gnu_pbds;
template<class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;

#define ll            long long int
#define double        long double
#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)
#define INF 1000000000000000005

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

// Debug Template, copied from Mikel_Arteta_8 (https://codeforces.com/blog/entry/68809)
void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}
template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif
// End of debugging template

const ll MOD = 1e9 + 7;
const ll N = 1e6 + 5;

/*---------------------------------------------------------------------------------------*/
ll inv(ll i) {if (i == 1) return 1; return (MOD - ((MOD / i) * inv(MOD % i)) % MOD) % MOD;}
ll mod_mul(ll a, ll b) {a = a % MOD; b = b % MOD; return (((a * b) % MOD) + MOD) % MOD;}
ll mod_add(ll a, ll b) {a = a % MOD; b = b % MOD; return (((a + b) % MOD) + MOD) % MOD;}
ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b);}
ll ceil_div(ll a, ll b) {return a % b == 0 ? a / b : a / b + 1;}
ll pwr(ll a, ll b) {a %= MOD; ll res = 1; while (b > 0) {if (b & 1) res = res * a % MOD; a = a * a % MOD; b >>= 1;} return res;}
/*---------------------------------------------------------------------------------------*/

/*
4 steps:
1) incrememnt count of all numbers in array
2) find the number of multiples of each number and store in cnt
3) use formula to find out the real value of cnt (if pairs, nc2)
4) traverse the array backwards and subtract from i'th cnt value all j cnt values where j is a multiple of i
*/

void solve(ll tc) {
    ll n;
    cin >> n;
    vector<ll> cnt(N + 1, 0ll);
    for(ll i = 0; i < n; i++) {
        ll x;
        cin >> x;
        cnt[x]++;
    }

    for(ll i = 1; i <= N; i++) {
        for(ll j = 2 * i; j <= N; j += i) {
            cnt[i] += cnt[j];
        }
        cnt[i] = (cnt[i] * (cnt[i] - 1)) / 2;
    }

    for(ll i = N; i >= 1; i--) {
        for(ll j = 2 * i; j <= N; j += i) {
            cnt[i] -= cnt[j];
        } 
    }

    cout << cnt[1];
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    clock_t z = clock();

    ll t = 1;
    // cin >> t;
    for(ll tc = 1; tc <= t; tc++) {
        solve(tc);
    }

    cerr << "Run Time : " << ((double)(clock() - z) / CLOCKS_PER_SEC) << endl;
    return 0;
}
