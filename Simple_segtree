class Simple_segtree {
public:
    vector<ll> seg;
    int size;
    int identity_element;

    ll operation(ll a, ll b) {
        return a + b;
    }

    void init(int n, int identity_element) {
        size = n;
        while(__builtin_popcount(size) != 1) {
            size++;
        }
        this->identity_element = identity_element;
    }

    void build(vector<ll> &a, int n) {
        seg.clear();
        seg.resize(2 * size, 0);
        for(int i = 0; i < size; i++) {
            if(i >= n) {
                seg[i + size] = identity_element;
            }
            else {
                seg[i + size] = a[i];
            }
        }
        for(int i = size - 1; i >= 1; i--) {
            seg[i] = operation(seg[2 * i], seg[2 * i + 1]);
        }
    }

    ll query(int node, int node_low, int node_high, int query_low, int query_high) {
        if(query_low <= node_low && query_high >= node_high) {
            return seg[node];
        }
        if(query_low > node_high || query_high < node_low) {
            return 0;
        }

        int mid = (node_low + node_high) / 2;
        return operation(query(2 * node, node_low, mid, query_low, query_high), query(2 * node + 1, mid + 1, node_high, query_low, query_high));
    }

    void update(int node, int node_low, int node_high, int query_low, int query_high, int val) {
        if(query_low <= node_low && query_high >= node_high) {
            seg[node] = val;
            return;
        }
        if(query_low > node_high || query_high < node_low) {
            return;
        }
        int mid = (node_low + node_high) / 2;
        update(2 * node, node_low, mid, query_low, query_high, val);
        update(2 * node + 1, mid + 1, node_high, query_low, query_high, val);
        seg[node] = operation(seg[2 * node], seg[2 * node + 1]);
    }
};
