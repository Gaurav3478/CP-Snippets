class Solution {
struct sparseTable {
    int n, k;
    vector<vector<int>> table;
    vector<int> logs;
    
    void init(int x) {
        n = x;
        logs.resize(n + 1);
        logs[1] = 0;
        for(int i = 2; i <= n; i++) {
            logs[i]=logs[i / 2] + 1;
        }
        k = *max_element(logs.begin(), logs.end());
        table.resize(k + 1, vector<int> (n + 1, 1e9));
    }

    int operation(int x,int y) {
        return min(x, y);
    }

    void build(vector<int> &arr) {
        for(int i = 0; i < n; i++) {
            table[0][i] = arr[i];
        }

        for(int j = 1; j <= k; j++) { 
            for(int i = 0; i + (1 << j) <= n; i++) {
                table[j][i] = operation(table[j-1][i], table[j-1][i + (1 << (j - 1))]);
            }
        }
    }

    int query(int l, int r) {
        int j = logs[r - l + 1];
        int answer = operation(table[j][l], table[j][r - (1 << j) + 1]);
        return answer;
    }
};
